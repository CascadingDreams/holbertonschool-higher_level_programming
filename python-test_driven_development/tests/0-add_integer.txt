The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Import the function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Test with two integers:
    >>> add_integer(1, 2)
    3

Test with a positive and a negative integer:
    >>> add_integer(100, -2)
    98

Test with only one argument (should use default b=98):
    >>> add_integer(2)
    100

Test with a float and an integer:
    >>> add_integer(100.3, -2)
    98

Test with two floats:
    >>> add_integer(10.5, 2.5)
    12

Test with a string for b:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test with a string for a:
    >>> add_integer("School", 4)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test with None as a:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test with very large integers:
    >>> add_integer(1000000000, 1000000000)
    2000000000

Test with negative float values:
    >>> add_integer(-10.5, -5.5)
    -15

Test with quotations:
    >>> add_integer(1, "2")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Float overflow:
    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
    ...
    OverflowError: Float overflow: cannot convert to integer

Test with negative float overflow:
    >>> add_integer(2, -float('inf'))
    Traceback (most recent call last):
    ... 
    OverflowError: Float overflow: cannot convert to integer

Test with NaN: 
    >>> add_integer(float('nan'), 2) 
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

