Test cases for MyList class
======================

Using ``MyList``
-------------------

Import the function from the module:
    >>> MyList = __import__('1-my_list').MyList

Test basic functionality:
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

Test with empty list:
>>> empty_list = MyList()
>>> empty_list.print_sorted()
[]

Test with one element:
>>> single_list = MyList()
>>> single_list.append(42)
>>> single_list.print_sorted()
[42]

Test with negative numbers:
>>> neg_list = MyList()
>>> neg_list.append(-3)
>>> neg_list.append(1)
>>> neg_list.append(-10)
>>> neg_list.append(5)
>>> neg_list.print_sorted()
[-10, -3, 1, 5]

Test with duplicate numbers:
>>> dup_list = MyList()
>>> dup_list.append(3)
>>> dup_list.append(1)
>>> dup_list.append(3)
>>> dup_list.append(1)
>>> dup_list.print_sorted()
[1, 1, 3, 3]

Test that MyList inherits from list:
>>> isinstance(my_list, list)
True
>>> isinstance(my_list, MyList)
True

Test list methods work:
>>> test_list = MyList([5, 3, 8, 1])
>>> len(test_list)
4
>>> test_list[0]
5
>>> test_list.pop()
1
>>> test_list
[5, 3, 8]

Test with already sorted list:
>>> sorted_list = MyList([1, 2, 3, 4, 5])
>>> sorted_list.print_sorted()
[1, 2, 3, 4, 5]

Test with reverse sorted list:
>>> reverse_list = MyList([5, 4, 3, 2, 1])
>>> reverse_list.print_sorted()
[1, 2, 3, 4, 5]